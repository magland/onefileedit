#include "onefile.h"
#include "textfile.h"
#include <QDateTime>
#include <QDir>
#include <iostream>
#include <stdio.h>
#include <QDebug>

QString get_critical_string() {
    return "=====-----=====-----=====";
}

QString create_one_file_text(const QStringList &file_paths,QString type0) {
    QString comment="% ";
    if ((type0=="cpp")||(type0=="h")) {
        comment="// ";
    }
    QString critical_string=get_critical_string();
    QString txt;
    txt+=comment+"This file was auto-generated by onefileedit.\n";
    txt+=comment+"You can edit this file and save changes.\n";
    txt+=comment+"Then interact with the console of onefileedit.\n";
    txt+=comment+"Contact Jeremy for more info.\n";
    txt+="\n\n";
    foreach (QString fname,file_paths) {
        txt+=comment+" --- "+fname+"\n";
    }
    txt+="\n\n";

    foreach (QString fname,file_paths) {
        txt+=comment+critical_string+"\n";
        txt+=comment+fname+"\n";
        txt+=comment+critical_string+"\n";
        txt+=read_text_file(fname);
        txt+="\n\n\n";
    }
    return txt;
}

void create_dir_if_doesnt_exist(QString path) {
    if (!QDir(path).exists()) {
        QString parent_path=QFileInfo(path).path();
        QString str=QFileInfo(path).fileName();
        QDir(parent_path).mkdir(str);
    }
}

QString create_temporary_file(QString type0)
{
    QString path=QDir::tempPath()+"/onefile";
    create_dir_if_doesnt_exist(path);
    QString ret=path+"/"+QString("%1.%2").arg(QDateTime::currentDateTime().toMSecsSinceEpoch()).arg(type0);
    return ret;
}

void open_editor(QString editor_exe,QString fname)
{
    QString cmd=QString("%1 %2 &").arg(editor_exe).arg(fname);
    printf("%s\n",cmd.toLatin1().data());
	int ret=system(cmd.toLatin1().data());
	Q_UNUSED(ret)
}

QString trim_empty_lines_at_end(const QString &str) {
    QStringList lines=str.split("\n");
    int i=lines.count()-1;
    while (i>=0) {
        if (lines[i].trimmed()!="") break;
        i--;
    }
    QString ret;
    for (int j=0; j<=i; j++) {
        ret+=lines[j]+"\n";
    }
    return ret;
}

void write_text_file_if_different(QString fname,const QString &txt) {
    QString txt2=read_text_file(fname);
    QString a=trim_empty_lines_at_end(txt);
    QString b=trim_empty_lines_at_end(txt2);
    if (a!=b) {
        printf("Write changes to file %s? (Y/N) ",fname.toLatin1().data());
        std::string resp;
        std::cin >> resp;
        if ((resp=="y")||(resp=="Y")) {
            write_text_file(fname,txt);
        }
    }
}

QString trim_initial_comment_characters(const QString &txt) {
    QString ret=txt;
    while (ret.indexOf("%")==0) ret=ret.mid(1);
    while (ret.indexOf("// ")==0) ret=ret.mid(2);
    while (ret.indexOf(" ")==0) ret=ret.mid(1);
    return ret;
}

void onefile_save_changes(QString fname)
{
    QString txt=read_text_file(fname);
    QStringList lines=txt.split("\n");
    QString current_file_name="";
    QString current_file_text="";
    QString critical_string=get_critical_string();
    int i=0;
    while (i<lines.count()) {
        QString line=lines[i];
		bool handled=false;
        if (line.contains(critical_string)) {
            QString line_plus_two=lines.value(i+2);
            if (line_plus_two.contains(critical_string)) {
                current_file_text=trim_empty_lines_at_end(current_file_text);
                if ((!current_file_name.isEmpty())&&(!current_file_text.isEmpty())) {
                    write_text_file_if_different(current_file_name,current_file_text);
                }
                current_file_name=trim_initial_comment_characters(lines.value(i+1));
                current_file_text="";
                i+=3;
				handled=true;
            }
        }
		if (!handled) {
            if (!current_file_name.isEmpty()) {
                current_file_text+=line+"\n";
            }
            i++;
        }
    }
    current_file_text=trim_empty_lines_at_end(current_file_text);
    if ((!current_file_name.isEmpty())&&(!current_file_text.isEmpty())) {
        write_text_file_if_different(current_file_name,current_file_text);
    }
}
